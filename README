The MeSH term assignment project contains three components:
1. Indexing: This component indexes texts and ranks them using different similarity functions.
2. MeSH: The main component of the project.
3. Utils: The utility functions for the first two components.

Indexing:
TREC2005.Index_TREC2005Genomics4584.Corpus: collects MEDLINE for the provided 4584 PMIDs from TREC 2005 Genomics track, and extract titles, abstracts and MeSH terms from collected MEDLINE records
TREC2005.Index_TREC2005Genomics4584.Index: indexes the TREC 2005 Genomic track evaluation set using multiprocessing
TREC2005.Search_TREC2005Genomics4584.RetBM25: ranki documents for every query document using the BM25 algorithm
TREC2005.Train_word2vec.Corpus4Gensim: prepares a dataset for the gensim.word2vec module
TREC2005.Train_word2vec.splitTexts: splits the text into sentences for gensim.word2vec

MeSH:
data_preparation.ParameterSetting: All the parameters 
data_preparation.RetKNN_MPRC.PRC: Re-rank BM25 outputs using the PRC algorithm
data_preparation.RetKNN_MPRC.MPRC: Re-rank BM25 outputs using the MPRC (query expansion using Word2Vec) algorithm
data_preparation.RetKNN_MPRC.MPRC_SKG: Re-rank BM25 outputs using the MPRC (Weigh adjustment using skip-gram counts) algorithm
data_preparation.RetKNN_MPRC.MPRC_Filter: Re-rank BM25 outputs using the MPRC (Filter out less important terms according to PRC weights) algorithm

data_preparation.Evaluation: evaluates the model performance using precision, recall, F score, MAP
data_preparation.Interpretation: interprets the similarity between two documents, why they are similar, which terms are matched and the associated term weights
data_preparation.SkipGramGenerator: generates skip-grams from text
data_preparation.RetKNN_PRC_analysis: analyzes the PRC predictions. What kinds of articles do PRC perform well on? What kinds of articles do PRC dislike?
data_preparation.RetKNN_PRC_analysis.ClusterDocbyPRCprecision: clusters articles according to PRC's precision on the article
data_preparation.RetKNN_PRC_analysis.ClusterDocbyPRCrecall: clusters articles according to PRC's recall
data_preparation.RetKNN_PRC_analysis.ClusterDocbyPRCf1: clusters articles according to PRC's F1
data_preparation.RetKNN_PRC_analysis.ClusterDocbyPRCmap: clusters articles according to PRC's MAP@5

data_preparation.Interpretation.MPRCresultAnalysis: produces summaries of PRC and MPRC performance. this is required for data_preparation.RetKNN_PRC_analysis.Analysis and its deriative classes
data_preparation.Interpretation.SimilarityAnalysis: produces matched terms between every pair of query article and similar article with the term weights

data_preparation.RetKNN_PRC_analysis.TermCountComp: compares term counts in PRC true positive predictions and false positive predictions
data_preparation.RetKNN_PRC_analysis.KeyTermComp: compares key term counts in PRC true positive predictions and false positive predictions
data_preparation.RetKNN_PRC_analysis.TermWtComp: compares K-L distance between query and similar articles in PRC true positive predictions and false positive predictions

data_preparation.Article_preclassification.CompMPRCvsPRC: Classify articles into two categories: PRC good performance and PRC poor performance. Every article will be represented by the weights on its stemmed vocabulary. Start with logistic regression.Plot the comparison of MPRC and PRC on low precision articles
